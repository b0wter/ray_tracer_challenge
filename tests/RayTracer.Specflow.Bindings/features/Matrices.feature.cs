// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RayTracer.Specflow.Bindings.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MatricesFeature : object, Xunit.IClassFixture<MatricesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Matrices.feature"
#line hidden
        
        public MatricesFeature(MatricesFeature.FixtureData fixtureData, RayTracer_Specflow_Bindings_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "features", "Matrices", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Constructing and inspecting a 4x4 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Constructing and inspecting a 4x4 matrix")]
        public virtual void ConstructingAndInspectingA4X4Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructing and inspecting a 4x4 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table1.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table1.AddRow(new string[] {
                            "5.5",
                            "6.5",
                            "7.5",
                            "8.5"});
                table1.AddRow(new string[] {
                            "9",
                            "10",
                            "11",
                            "12"});
                table1.AddRow(new string[] {
                            "13.5",
                            "14.5",
                            "15.5",
                            "16.5"});
#line 4
        testRunner.Given("the following 4x4 matrix M:", ((string)(null)), table1, "Given ");
#line hidden
#line 10
        testRunner.Then("M[0,0] = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
        testRunner.And("M[0,3] = 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
        testRunner.And("M[1,0] = 5.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.And("M[1,2] = 7.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
        testRunner.And("M[2,2] = 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
        testRunner.And("M[3,0] = 13.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
        testRunner.And("M[3,2] = 15.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A 2x2 matrix ought to be representable")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A 2x2 matrix ought to be representable")]
        public virtual void A2X2MatrixOughtToBeRepresentable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A 2x2 matrix ought to be representable", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b"});
                table2.AddRow(new string[] {
                            "-3",
                            "5"});
                table2.AddRow(new string[] {
                            "1",
                            "-2"});
#line 19
        testRunner.Given("the following 2x2 matrix M:", ((string)(null)), table2, "Given ");
#line hidden
#line 23
        testRunner.Then("M[0,0] = -3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
        testRunner.And("M[0,1] = 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
        testRunner.And("M[1,0] = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
        testRunner.And("M[1,1] = -2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A 3x3 matrix ought to be representable")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A 3x3 matrix ought to be representable")]
        public virtual void A3X3MatrixOughtToBeRepresentable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A 3x3 matrix ought to be representable", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table3.AddRow(new string[] {
                            "-3",
                            "5",
                            "0"});
                table3.AddRow(new string[] {
                            "1",
                            "-2",
                            "-7"});
                table3.AddRow(new string[] {
                            "0",
                            "1",
                            "1"});
#line 29
        testRunner.Given("the following 3x3 matrix M:", ((string)(null)), table3, "Given ");
#line hidden
#line 34
        testRunner.Then("M[0,0] = -3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
        testRunner.And("M[1,1] = -2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
        testRunner.And("M[2,2] = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Matrix equality with identical matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with identical matrices")]
        public virtual void MatrixEqualityWithIdenticalMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with identical matrices", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table4.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table4.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table4.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table4.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 39
        testRunner.Given("the following matrix A:", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table5.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table5.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table5.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table5.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 45
        testRunner.And("the following matrix B:", ((string)(null)), table5, "And ");
#line hidden
#line 51
        testRunner.Then("A = B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Matrix equality with different matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with different matrices")]
        public virtual void MatrixEqualityWithDifferentMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with different matrices", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table6.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table6.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table6.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table6.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 54
        testRunner.Given("the following matrix A:", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table7.AddRow(new string[] {
                            "2",
                            "3",
                            "4",
                            "5"});
                table7.AddRow(new string[] {
                            "6",
                            "7",
                            "8",
                            "9"});
                table7.AddRow(new string[] {
                            "8",
                            "7",
                            "6",
                            "5"});
                table7.AddRow(new string[] {
                            "4",
                            "3",
                            "2",
                            "1"});
#line 60
        testRunner.And("the following matrix B:", ((string)(null)), table7, "And ");
#line hidden
#line 66
        testRunner.Then("A != B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying two matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying two matrices")]
        public virtual void MultiplyingTwoMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying two matrices", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table8.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table8.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table8.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table8.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 69
        testRunner.Given("the following matrix A:", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table9.AddRow(new string[] {
                            "-2",
                            "1",
                            "2",
                            "3"});
                table9.AddRow(new string[] {
                            "3",
                            "2",
                            "1",
                            "-1"});
                table9.AddRow(new string[] {
                            "4",
                            "3",
                            "6",
                            "5"});
                table9.AddRow(new string[] {
                            "1",
                            "2",
                            "7",
                            "8"});
#line 75
        testRunner.And("the following matrix B:", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table10.AddRow(new string[] {
                            "20",
                            "22",
                            "50",
                            "48"});
                table10.AddRow(new string[] {
                            "44",
                            "54",
                            "114",
                            "108"});
                table10.AddRow(new string[] {
                            "40",
                            "58",
                            "110",
                            "102"});
                table10.AddRow(new string[] {
                            "16",
                            "26",
                            "46",
                            "42"});
#line 81
        testRunner.Then("A * B is the following 4x4 matrix:", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A matrix multiplied by a tuple")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A matrix multiplied by a tuple")]
        public virtual void AMatrixMultipliedByATuple()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A matrix multiplied by a tuple", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table11.AddRow(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table11.AddRow(new string[] {
                            "2",
                            "4",
                            "4",
                            "2"});
                table11.AddRow(new string[] {
                            "8",
                            "6",
                            "4",
                            "1"});
                table11.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "1"});
#line 89
        testRunner.Given("the following matrix A:", ((string)(null)), table11, "Given ");
#line hidden
#line 95
        testRunner.And("b ← tuple(1, 2, 3, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
        testRunner.Then("A * b = tuple(18, 24, 33, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying a matrix by the identity matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying a matrix by the identity matrix")]
        public virtual void MultiplyingAMatrixByTheIdentityMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying a matrix by the identity matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table12.AddRow(new string[] {
                            "0",
                            "1",
                            "2",
                            "4"});
                table12.AddRow(new string[] {
                            "1",
                            "2",
                            "4",
                            "8"});
                table12.AddRow(new string[] {
                            "2",
                            "4",
                            "8",
                            "16"});
                table12.AddRow(new string[] {
                            "4",
                            "8",
                            "16",
                            "32"});
#line 99
        testRunner.Given("the following matrix A:", ((string)(null)), table12, "Given ");
#line hidden
#line 105
        testRunner.Then("A * identity_matrix = A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying the identity matrix by a tuple")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying the identity matrix by a tuple")]
        public virtual void MultiplyingTheIdentityMatrixByATuple()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying the identity matrix by a tuple", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 108
        testRunner.Given("a ← tuple(1, 2, 3, 4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
        testRunner.Then("identity_matrix * a = a", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transposing a matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Transposing a matrix")]
        public virtual void TransposingAMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transposing a matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table13.AddRow(new string[] {
                            "0",
                            "9",
                            "3",
                            "0"});
                table13.AddRow(new string[] {
                            "9",
                            "8",
                            "0",
                            "8"});
                table13.AddRow(new string[] {
                            "1",
                            "8",
                            "5",
                            "3"});
                table13.AddRow(new string[] {
                            "0",
                            "0",
                            "5",
                            "8"});
#line 112
        testRunner.Given("the following matrix A:", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table14.AddRow(new string[] {
                            "0",
                            "9",
                            "1",
                            "0"});
                table14.AddRow(new string[] {
                            "9",
                            "8",
                            "8",
                            "0"});
                table14.AddRow(new string[] {
                            "3",
                            "0",
                            "5",
                            "5"});
                table14.AddRow(new string[] {
                            "0",
                            "8",
                            "3",
                            "8"});
#line 118
        testRunner.Then("transpose(A) is the following matrix:", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transposing the identity matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Transposing the identity matrix")]
        public virtual void TransposingTheIdentityMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transposing the identity matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
        testRunner.Given("A ← transpose(identity_matrix)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
        testRunner.Then("A = identity_matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the determinant of a 2x2 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the determinant of a 2x2 matrix")]
        public virtual void CalculatingTheDeterminantOfA2X2Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the determinant of a 2x2 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b"});
                table15.AddRow(new string[] {
                            "1",
                            "5"});
                table15.AddRow(new string[] {
                            "-3",
                            "2"});
#line 130
        testRunner.Given("the following 2x2 matrix A:", ((string)(null)), table15, "Given ");
#line hidden
#line 134
        testRunner.Then("determinant(A) = 17", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A submatrix of a 3x3 matrix is a 2x2 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A submatrix of a 3x3 matrix is a 2x2 matrix")]
        public virtual void ASubmatrixOfA3X3MatrixIsA2X2Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A submatrix of a 3x3 matrix is a 2x2 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 136
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table16.AddRow(new string[] {
                            "1",
                            "5",
                            "0"});
                table16.AddRow(new string[] {
                            "-3",
                            "2",
                            "7"});
                table16.AddRow(new string[] {
                            "0",
                            "6",
                            "-3"});
#line 137
        testRunner.Given("the following 3x3 matrix A:", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b"});
                table17.AddRow(new string[] {
                            "-3",
                            "2"});
                table17.AddRow(new string[] {
                            "0",
                            "6"});
#line 142
        testRunner.Then("submatrix(A, 0, 2) is the following 2x2 matrix:", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A submatrix of a 4x4 matrix is a 3x3 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A submatrix of a 4x4 matrix is a 3x3 matrix")]
        public virtual void ASubmatrixOfA4X4MatrixIsA3X3Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A submatrix of a 4x4 matrix is a 3x3 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 147
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table18.AddRow(new string[] {
                            "-6",
                            "1",
                            "1",
                            "6"});
                table18.AddRow(new string[] {
                            "-8",
                            "5",
                            "8",
                            "6"});
                table18.AddRow(new string[] {
                            "-1",
                            "0",
                            "8",
                            "2"});
                table18.AddRow(new string[] {
                            "-7",
                            "1",
                            "-1",
                            "1"});
#line 148
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table19.AddRow(new string[] {
                            "-6",
                            "1",
                            "6"});
                table19.AddRow(new string[] {
                            "-8",
                            "8",
                            "6"});
                table19.AddRow(new string[] {
                            "-7",
                            "-1",
                            "1"});
#line 154
        testRunner.Then("submatrix(A, 2, 1) is the following 3x3 matrix:", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating a minor of a 3x3 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating a minor of a 3x3 matrix")]
        public virtual void CalculatingAMinorOfA3X3Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating a minor of a 3x3 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 160
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table20.AddRow(new string[] {
                            "3",
                            "5",
                            "0"});
                table20.AddRow(new string[] {
                            "2",
                            "-1",
                            "-7"});
                table20.AddRow(new string[] {
                            "6",
                            "-1",
                            "5"});
#line 161
        testRunner.Given("the following 3x3 matrix A:", ((string)(null)), table20, "Given ");
#line hidden
#line 166
        testRunner.Then("B ← submatrix(A, 1, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
        testRunner.And("determinant(B) = 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
        testRunner.And("minor(A, 1, 0) = 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating a cofactor of a 3x3 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating a cofactor of a 3x3 matrix")]
        public virtual void CalculatingACofactorOfA3X3Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating a cofactor of a 3x3 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 170
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table21.AddRow(new string[] {
                            "3",
                            "5",
                            "0"});
                table21.AddRow(new string[] {
                            "2",
                            "-1",
                            "-7"});
                table21.AddRow(new string[] {
                            "6",
                            "-1",
                            "5"});
#line 171
        testRunner.Given("the following 3x3 matrix A:", ((string)(null)), table21, "Given ");
#line hidden
#line 176
        testRunner.Then("minor(A, 0, 0) = -12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 177
        testRunner.And("cofactor(A, 0, 0) = -12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
        testRunner.And("minor(A, 1, 0) = 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
        testRunner.And("cofactor(A, 1, 0) = -25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the determinant of a 3x3 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the determinant of a 3x3 matrix")]
        public virtual void CalculatingTheDeterminantOfA3X3Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the determinant of a 3x3 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 181
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c"});
                table22.AddRow(new string[] {
                            "1",
                            "2",
                            "6"});
                table22.AddRow(new string[] {
                            "-5",
                            "8",
                            "-4"});
                table22.AddRow(new string[] {
                            "2",
                            "6",
                            "4"});
#line 182
        testRunner.Given("the following 3x3 matrix A:", ((string)(null)), table22, "Given ");
#line hidden
#line 187
        testRunner.Then("cofactor(A, 0, 0) = 56", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
        testRunner.And("cofactor(A, 0, 1) = 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
        testRunner.And("cofactor(A, 0, 2) = -46", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
        testRunner.And("determinant(A) = -196", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
        testRunner.Then("determinant(A) = -196", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the determinant of a 4x4 matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the determinant of a 4x4 matrix")]
        public virtual void CalculatingTheDeterminantOfA4X4Matrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the determinant of a 4x4 matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 193
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table23.AddRow(new string[] {
                            "-2",
                            "-8",
                            "3",
                            "5"});
                table23.AddRow(new string[] {
                            "-3",
                            "1",
                            "7",
                            "3"});
                table23.AddRow(new string[] {
                            "1",
                            "2",
                            "-9",
                            "6"});
                table23.AddRow(new string[] {
                            "-6",
                            "7",
                            "7",
                            "-9"});
#line 194
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table23, "Given ");
#line hidden
#line 200
        testRunner.Then("cofactor(A, 0, 0) = 690", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
        testRunner.And("cofactor(A, 0, 1) = 447", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
        testRunner.And("cofactor(A, 0, 2) = 210", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
        testRunner.And("cofactor(A, 0, 3) = 51", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
        testRunner.And("determinant(A) = -4071", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Testing an invertible matrix for invertibility")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Testing an invertible matrix for invertibility")]
        public virtual void TestingAnInvertibleMatrixForInvertibility()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing an invertible matrix for invertibility", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 206
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table24.AddRow(new string[] {
                            "6",
                            "4",
                            "4",
                            "4"});
                table24.AddRow(new string[] {
                            "5",
                            "5",
                            "7",
                            "6"});
                table24.AddRow(new string[] {
                            "4",
                            "-9",
                            "3",
                            "-7"});
                table24.AddRow(new string[] {
                            "9",
                            "1",
                            "7",
                            "-6"});
#line 207
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table24, "Given ");
#line hidden
#line 213
        testRunner.Then("determinant(A) = -2120", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
        testRunner.And("A is invertible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Testing a noninvertible matrix for invertibility")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Testing a noninvertible matrix for invertibility")]
        public virtual void TestingANoninvertibleMatrixForInvertibility()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing a noninvertible matrix for invertibility", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 216
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table25.AddRow(new string[] {
                            "-4",
                            "2",
                            "-2",
                            "-3"});
                table25.AddRow(new string[] {
                            "9",
                            "6",
                            "2",
                            "6"});
                table25.AddRow(new string[] {
                            "0",
                            "-5",
                            "1",
                            "-5"});
                table25.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "0"});
#line 217
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table25, "Given ");
#line hidden
#line 223
        testRunner.Then("determinant(A) = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
        testRunner.And("A is not invertible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the inverse of a matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the inverse of a matrix")]
        public virtual void CalculatingTheInverseOfAMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the inverse of a matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table26.AddRow(new string[] {
                            "-5",
                            "2",
                            "6",
                            "-8"});
                table26.AddRow(new string[] {
                            "1",
                            "-5",
                            "1",
                            "8"});
                table26.AddRow(new string[] {
                            "7",
                            "7",
                            "-6",
                            "-7"});
                table26.AddRow(new string[] {
                            "1",
                            "-3",
                            "7",
                            "4"});
#line 227
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table26, "Given ");
#line hidden
#line 233
        testRunner.And("B ← inverse(A)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
        testRunner.Then("determinant(A) = 532", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
        testRunner.And("cofactor(A, 2, 3) = -160", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
        testRunner.And("B[3,2] = -160/532", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
        testRunner.And("cofactor(A, 3, 2) = 105", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
        testRunner.And("B[2,3] = 105/532", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table27.AddRow(new string[] {
                            "0.21805",
                            "0.45113",
                            "0.24060",
                            "-0.04511"});
                table27.AddRow(new string[] {
                            "-0.80827",
                            "-1.45677",
                            "-0.44361",
                            "0.52068"});
                table27.AddRow(new string[] {
                            "-0.07895",
                            "-0.22368",
                            "-0.05263",
                            "0.19737"});
                table27.AddRow(new string[] {
                            "-0.52256",
                            "-0.81391",
                            "-0.30075",
                            "0.30639"});
#line 239
        testRunner.And("B is the following 4x4 matrix:", ((string)(null)), table27, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the inverse of another matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the inverse of another matrix")]
        public virtual void CalculatingTheInverseOfAnotherMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the inverse of another matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table28.AddRow(new string[] {
                            "8",
                            "-5",
                            "9",
                            "2"});
                table28.AddRow(new string[] {
                            "7",
                            "5",
                            "6",
                            "1"});
                table28.AddRow(new string[] {
                            "-6",
                            "0",
                            "9",
                            "6"});
                table28.AddRow(new string[] {
                            "-3",
                            "0",
                            "-9",
                            "-4"});
#line 247
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table28, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table29.AddRow(new string[] {
                            "-0.15385",
                            "-0.15385",
                            "-0.28205",
                            "-0.53846"});
                table29.AddRow(new string[] {
                            "-0.07692",
                            "0.12308",
                            "0.02564",
                            "0.03077"});
                table29.AddRow(new string[] {
                            "0.35897",
                            "0.35897",
                            "0.43590",
                            "0.92308"});
                table29.AddRow(new string[] {
                            "-0.69231",
                            "-0.69231",
                            "-0.76923",
                            "-1.92308"});
#line 253
        testRunner.Then("inverse(A) is the following 4x4 matrix:", ((string)(null)), table29, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the inverse of a third matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the inverse of a third matrix")]
        public virtual void CalculatingTheInverseOfAThirdMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the inverse of a third matrix", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 260
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table30.AddRow(new string[] {
                            "9",
                            "3",
                            "0",
                            "9"});
                table30.AddRow(new string[] {
                            "-5",
                            "-2",
                            "-6",
                            "-3"});
                table30.AddRow(new string[] {
                            "-4",
                            "9",
                            "6",
                            "4"});
                table30.AddRow(new string[] {
                            "-7",
                            "6",
                            "6",
                            "2"});
#line 261
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table30, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table31.AddRow(new string[] {
                            "-0.04074",
                            "-0.07778",
                            "0.14444",
                            "-0.22222"});
                table31.AddRow(new string[] {
                            "-0.07778",
                            "0.03333",
                            "0.36667",
                            "-0.33333"});
                table31.AddRow(new string[] {
                            "-0.02901",
                            "-0.14630",
                            "-0.10926",
                            "0.12963"});
                table31.AddRow(new string[] {
                            "0.17778",
                            "0.06667",
                            "-0.26667",
                            "0.33333"});
#line 267
        testRunner.Then("inverse(A) is the following 4x4 matrix:", ((string)(null)), table31, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying a product by its inverse")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying a product by its inverse")]
        public virtual void MultiplyingAProductByItsInverse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying a product by its inverse", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 274
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table32.AddRow(new string[] {
                            "3",
                            "-9",
                            "7",
                            "3"});
                table32.AddRow(new string[] {
                            "3",
                            "-8",
                            "2",
                            "-9"});
                table32.AddRow(new string[] {
                            "-4",
                            "4",
                            "4",
                            "1"});
                table32.AddRow(new string[] {
                            "-6",
                            "5",
                            "-1",
                            "1"});
#line 275
        testRunner.Given("the following 4x4 matrix A:", ((string)(null)), table32, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "a",
                            "b",
                            "c",
                            "d"});
                table33.AddRow(new string[] {
                            "8",
                            "2",
                            "2",
                            "2"});
                table33.AddRow(new string[] {
                            "3",
                            "-1",
                            "7",
                            "0"});
                table33.AddRow(new string[] {
                            "7",
                            "0",
                            "5",
                            "4"});
                table33.AddRow(new string[] {
                            "6",
                            "-2",
                            "0",
                            "5"});
#line 281
        testRunner.And("the following 4x4 matrix B:", ((string)(null)), table33, "And ");
#line hidden
#line 287
        testRunner.And("C ← A * B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
        testRunner.Then("C * inverse(B) = A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MatricesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MatricesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
